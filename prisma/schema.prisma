generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

// ユーザーテーブル
model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String   @unique @map("メールアドレス")
  isEmailVerified    Boolean  @default(false) @map("メールアドレス認証済みフラグ")
  isIdentityVerified Boolean  @default(false) @map("本人確認済みフラグ")
  username           String   @map("ユーザー名")
  birthdate          DateTime @map("生年月日")
  userIconImageUrl   String?  @map("ユーザーアイコン画像URL")
  balance            Float    @default(0) @map("残高")
  points             Int      @default(0) @map("ポイント")
  createdAt          DateTime @default(now()) @map("アカウント作成日")
  updatedAt          DateTime @default(now()) @map("アカウント情報更新日")
  lastLoginDate      DateTime @default(now()) @map("最終ログイン日")
  isDeleted          Boolean  @default(false) @map("削除フラグ")
  isBanned           Boolean  @default(false) @map("追放フラグ")

  addresses             Address[]
  transferRequests      TransferRequest[]
  pointChanges          PointChange[]
  userViewHistories     UserViewHistory[]
  listingComments       ListingComment[]
  likes                 Like[]
  userNotificationReads UserNotificationRead[]
  sellListings          Listing[]              @relation("seller")
  buyListings           Listing[]              @relation("buyer")

  @@map("users")
}

// 住所テーブル
model Address {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @map("ユーザーID") @db.ObjectId
  postalCode   String @map("郵便番号")
  prefecture   String @map("都道府県")
  city         String @map("市区町村")
  addressLine1 String @map("番地")
  addressLine2 String @map("建物名")
  phoneNumber  String @map("電話番号")

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

// 振込申請テーブル
model TransferRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float    @map("金額")
  date          DateTime @default(now()) @map("日付")
  isTransferred Boolean  @default(false) @map("振込済みフラグ")
  userId        String   @map("ユーザーID") @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  @@map("transfer_requests")
}

// ポイント増減テーブル
model PointChange {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @map("ユーザーID") @db.ObjectId
  amount             Float    @map("金額")
  date               DateTime @default(now()) @map("日付")
  event              String?  @map("イベント名称")
  pointChangeEventId String?  @map("ポイント増減イベントID") @db.ObjectId

  user             User              @relation(fields: [userId], references: [id])
  pointChangeEvent PointChangeEvent? @relation(fields: [pointChangeEventId], references: [id])

  @@map("point_changes")
}

// ポイント増減イベントテーブル
model PointChangeEvent {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @map("名称")
  amount Float? @map("金額")

  PointChanges PointChange[]

  @@map("point_change_events")
}

// 出品情報テーブル
model Listing {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  productName      String?   @map("商品名")
  price            Int?      @map("価格")
  previousPrice    Int?      @map("変更前価格")
  isPublic         Boolean   @default(false) @map("公開フラグ")
  isDeleted        Boolean   @default(false) @map("削除フラグ")
  isPaid           Boolean   @default(false) @map("支払済フラグ")
  isShipped        Boolean   @default(false) @map("発送済みフラグ")
  isReceived       Boolean   @default(false) @map("受取済みフラグ")
  listingDate      DateTime? @map("出品日")
  auctionDate      DateTime? @map("落札日")
  updatedAt        DateTime? @map("情報更新日")
  sellerId         String    @map("出品者ID") @db.ObjectId
  buyerId          String?   @map("購入者ID") @db.ObjectId
  shippingDaysId   String?   @map("配送日数ID") @db.ObjectId
  shippingMethodId String?   @map("配送方法ID") @db.ObjectId

  seller         User?           @relation("seller", fields: [sellerId], references: [id])
  buyer          User?           @relation("buyer", fields: [buyerId], references: [id])
  shippingDays   ShippingDays?   @relation(fields: [shippingDaysId], references: [id])
  shippingMethod ShippingMethod? @relation(fields: [shippingMethodId], references: [id])

  listingImages     ListingImage[]
  userViewHistorys  UserViewHistory[]
  listingComments   ListingComment[]
  likes             Like[]
  listingCategories ListingCategory[]

  @@map("listings")
}

// 出品情報画像テーブル
model ListingImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  listingId String @map("出品情報ID") @db.ObjectId
  imageId   String @map("画像ID") @db.ObjectId

  listing Listing @relation(fields: [listingId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id])

  @@map("listing_images")
}

// 画像テーブル
model Image {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String @map("画像URL")

  listingImages ListingImage[]

  @@map("images")
}

// ユーザー閲覧履歴テーブル
model UserViewHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("ユーザーID") @db.ObjectId
  listingId String   @map("商品ID") @db.ObjectId
  viewedAt  DateTime @default(now()) @map("閲覧日時")

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@map("user_view_history")
}

// 出品情報コメントテーブル
model ListingComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  listingId String  @map("出品情報ID") @db.ObjectId
  userId    String  @map("ユーザーID") @db.ObjectId
  comment   String  @map("コメント")
  isRead    Boolean @default(false) @map("既読フラグ")

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@map("listing_comments")
}

// カテゴリーテーブル
model Category {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  parentCategoryId String? @map("親カテゴリID") @db.ObjectId
  categoryName     String  @map("カテゴリー名")

  listingCategories ListingCategory[]

  @@map("categories")
}

// 商品カテゴリーテーブル
model ListingCategory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String @map("商品ID") @db.ObjectId
  categoryId String @map("カテゴリーID") @db.ObjectId

  listing  Listing  @relation(fields: [listingId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("listing_categories")
}

// いいねテーブル
model Like {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  listingId String @map("商品ID") @db.ObjectId
  userId    String @map("ユーザーID") @db.ObjectId

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@map("likes")
}

// タグテーブル
model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @map("名称")

  @@map("tags")
}

// 配送日数テーブル
model ShippingDays {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String @map("タイトル")
  maxDays Int    @map("最大日数")

  listing Listing[]

  @@map("shipping_days")
}

// 配送方法テーブル
model ShippingMethod {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @map("名称")
  amount Float  @map("金額")

  listings Listing[]

  @@map("shipping_methods")
}

// お知らせテーブル
model Notification {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime @default(now()) @map("お知らせ日")
  content String   @map("お知らせ内容")

  userNotificationRead UserNotificationRead[]

  @@map("notifications")
}

// ユーザーお知らせ既読テーブル
model UserNotificationRead {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String  @map("お知らせID") @db.ObjectId
  userId         String  @map("ユーザーID") @db.ObjectId
  isRead         Boolean @default(false) @map("既読フラグ")

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@map("user_notification_reads")
}
