generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  userId         String   @db.ObjectId
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl       String
  name           String
  price          Int
  tagIds         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         String?  @default("selling") // 商品のステータス。 TODO: 交渉中のステータスが必要になるかも
  condition      String? // 商品の状態
  shippingCost   Int? // 送料
  daysToShip     Int? // 発送までの日数
  shippingMethod String? // 配送方法
  sellingPrice   Int? // 販売価格

  @@map("products") // databaseではproductsコレクションに保存される。DBでは複数形で格納されるが、Prismaでは単数形で扱える。
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String @unique

  @@map("Tag")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // createdAt      DateTime @default(now())
  // updatedAt      DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Products      Product[]

  conversationsIds String[]       @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  // TODO: のちに必要かも
  // hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  // name String?
  // isGroup Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  // buyerId String @db.ObjectId
  // buyer User @relation(fields: [buyerId], references: [id])

  // sellerId String @db.ObjectId
  // seller User @relation(fields: [sellerId], references: [id])
  @@map("conversations")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}
