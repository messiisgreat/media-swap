generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator erd {
    provider = "prisma-erd-generator"
}

// ユーザーテーブル
model User {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    email              String   @unique
    isEmailVerified    Boolean  @default(false) @map("is_email_verified")
    isIdentityVerified Boolean  @default(false) @map("is_identity_verified")
    username           String
    birthdate          DateTime
    userIconImageUrl   String?  @map("user_icon_image_url")
    balance            Int      @default(0)
    points             Int      @default(0)
    createdAt          DateTime @default(now()) @map("created_at")
    updatedAt          DateTime @default(now()) @map("updated_at")
    lastLoginDate      DateTime @default(now()) @map("last_login_date")
    isDeleted          Boolean  @default(false) @map("is_deleted")
    isBanned           Boolean  @default(false) @map("is_banned")

    accounts              Account[]
    sessions              Session[]
    addresses             Address[]
    transferRequests      TransferRequest[]
    pointChanges          PointChange[]
    userViewHistories     UserViewHistory[]
    listingComments       ListingComment[]
    likes                 Like[]
    userNotificationReads UserNotificationRead[]
    sellListings          Listing[]              @relation("seller")
    transactions          Transaction[]          @relation("buyer")
    raterTransactions     TransactionRating[]    @relation("rater")
    ratedTransactions     TransactionRating[]    @relation("rated")
    transactionComments   TransactionComment[]
    userCoupons           UserCoupon[]

    @@map("users")
}

// ユーザー住所テーブル
model Address {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    userId       String  @map("user_id") @db.ObjectId
    postalCode   String  @map("postal_code")
    prefecture   String
    city         String
    addressLine1 String  @map("address_line1")
    addressLine2 String? @map("address_line2")
    phoneNumber  String  @map("phone_number")

    user User @relation(fields: [userId], references: [id])

    @@map("addresses")
}

// 振込申請テーブル
model TransferRequest {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    userId        String   @map("user_id") @db.ObjectId
    amount        Int
    date          DateTime @default(now())
    isTransferred Boolean  @default(false) @map("is_transferred")

    user User @relation(fields: [userId], references: [id])

    @@map("transfer_requests")
}

// ポイント増減テーブル
model PointChange {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    userId             String   @map("user_id") @db.ObjectId
    amount             Int
    date               DateTime @default(now())
    event              String?
    pointChangeEventId String?  @map("point_change_event_id") @db.ObjectId

    user             User              @relation(fields: [userId], references: [id])
    pointChangeEvent PointChangeEvent? @relation(fields: [pointChangeEventId], references: [id])

    @@map("point_changes")
}

// ポイント増減イベントテーブル
model PointChangeEvent {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    amount Int?

    PointChanges PointChange[]

    @@map("point_change_events")
}

// クーポン種別テーブル
model Coupon {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    discountAmount Int?      @map("discount_amount")
    discountRate   Int?      @map("discount_rate")
    startDate      DateTime? @map("start_date")
    endDate        DateTime? @map("end_date")

    userCoupons UserCoupon[]

    @@map("coupons")
}

// クーポンテーブル
model UserCoupon {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId   String  @map("user_id") @db.ObjectId
    couponId String  @map("coupon_id") @db.ObjectId
    isUsed   Boolean @default(false) @map("is_used")

    user        User         @relation(fields: [userId], references: [id])
    coupon      Coupon       @relation(fields: [couponId], references: [id])
    Transaction Transaction?

    @@map("user_coupons")
}

// 出品情報テーブル
model Listing {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    productName        String?   @map("product_name")
    price              Int?
    previousPrice      Int?      @map("previous_price")
    isPublic           Boolean   @default(false) @map("is_public")
    isDeleted          Boolean   @default(false) @map("is_deleted")
    listingDate        DateTime? @map("listing_date")
    updatedAt          DateTime? @map("updated_at")
    sellerId           String    @map("seller_id") @db.ObjectId
    shippingDaysId     String?   @map("shipping_days_id") @db.ObjectId
    shippingMethodId   String?   @map("shipping_method_id") @db.ObjectId
    productConditionId String?   @map("product_condition_id") @db.ObjectId
    transactionId      String?   @unique @map("transaction_id") @db.ObjectId

    seller           User?             @relation("seller", fields: [sellerId], references: [id])
    shippingDays     ShippingDays?     @relation(fields: [shippingDaysId], references: [id])
    shippingMethod   ShippingMethod?   @relation(fields: [shippingMethodId], references: [id])
    productCondition ProductCondition? @relation(fields: [productConditionId], references: [id])

    transaction       Transaction?
    listingImages     ListingImage[]
    userViewHistorys  UserViewHistory[]
    listingComments   ListingComment[]
    likes             Like[]
    listingCategories ListingCategory[]
    listingTags       ListingTag[]

    @@map("listings")
}

// 画像テーブル
model Image {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    imageURL String  @map("image_url")
    caption  String?

    listingImages ListingImage[]

    @@map("images")
}

// 出品情報画像テーブル
model ListingImage {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    listingId String @map("listing_id") @db.ObjectId
    imageId   String @map("image_id") @db.ObjectId
    order     Int    @default(0)

    listing Listing @relation(fields: [listingId], references: [id])
    image   Image   @relation(fields: [imageId], references: [id])

    @@unique([listingId, imageId])
    @@map("listing_images")
}

// 商品状態テーブル
model ProductCondition {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    listings Listing[]

    @@map("product_conditions")
}

// カテゴリーテーブル
model Category {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    parentId     String? @map("parent_id") @db.ObjectId
    categoryName String  @map("category_name")

    parentCategory Category? @relation("parentCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    listingCategories ListingCategory[]
    children          Category[]        @relation("parentCategory")

    @@map("categories")
}

// 商品カテゴリーテーブル
model ListingCategory {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    listingId  String @map("listing_id") @db.ObjectId
    categoryId String @map("category_id") @db.ObjectId

    listing  Listing  @relation(fields: [listingId], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    @@unique([listingId, categoryId])
    @@map("listing_categories")
}

// いいねテーブル
model Like {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    listingId String @map("listing_id") @db.ObjectId
    userId    String @map("user_id") @db.ObjectId

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@unique([userId, listingId])
    @@map("likes")
}

// タグテーブル
model Tag {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now()) @map("created_at")

    listingTags ListingTag[]

    @@map("tags")
}

// 出品情報タグテーブル
model ListingTag {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    listingId String @map("listing_id") @db.ObjectId
    tagId     String @map("tag_id") @db.ObjectId

    listing Listing @relation(fields: [listingId], references: [id])
    tag     Tag     @relation(fields: [tagId], references: [id])

    @@unique([listingId, tagId])
    @@map("listing_tags")
}

// 配送日数テーブル
model ShippingDays {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    maxDays Int

    listing Listing[]

    @@map("shipping_days")
}

// 配送方法テーブル
model ShippingMethod {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    amount Int

    listings Listing[]

    @@map("shipping_methods")
}

// 出品情報コメントテーブル
model ListingComment {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    listingId String  @map("listing_id") @db.ObjectId
    userId    String  @map("user_id") @db.ObjectId
    comment   String
    isRead    Boolean @default(false) @map("is_read")

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@unique([userId, listingId])
    @@map("listing_comments")
}

// 取引テーブル
model Transaction {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    listingId           String   @unique @map("listing_id") @db.ObjectId
    buyerId             String   @map("buyer_id") @db.ObjectId
    price               Int
    externalPaymentId   String?  @map("external_payment_id")
    transactionStatusId String   @map("transaction_status_id") @db.ObjectId
    isCanceled          Boolean  @default(false) @map("is_canceled")
    userCouponId        String?  @unique @map("user_coupon_id") @db.ObjectId
    purchaseDate        DateTime @default(now()) @map("purchase_date")
    transactionRatingId String?  @map("transaction_rating_id") @db.ObjectId

    buyer             User              @relation("buyer", fields: [buyerId], references: [id])
    listing           Listing           @relation(fields: [listingId], references: [id])
    transactionStatus TransactionStatus @relation(fields: [transactionStatusId], references: [id])
    userCoupon        UserCoupon?       @relation(fields: [userCouponId], references: [id])

    transactionRating   TransactionRating[]
    transactionComments TransactionComment[]

    @@unique([listingId, buyerId])
    @@map("transactions")
}

model TransactionStatus {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    step Int
    name String

    transactions Transaction[]

    @@map("transaction_statuses")
}

// 取引コメントテーブル
model TransactionComment {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    transactionId String   @map("transaction_id") @db.ObjectId
    userId        String   @map("user_id") @db.ObjectId
    comment       String
    isRead        Boolean  @default(false) @map("is_read")
    createdAt     DateTime @default(now()) @map("created_at")

    user        User        @relation(fields: [userId], references: [id])
    transaction Transaction @relation(fields: [transactionId], references: [id])

    @@unique([userId, transactionId])
    @@map("transaction_comments")
}

// 取引評価テーブル
model TransactionRating {
    id                        String  @id @default(auto()) @map("_id") @db.ObjectId
    transactionId             String  @map("transaction_id") @db.ObjectId
    raterId                   String  @map("rater_id") @db.ObjectId
    ratedId                   String  @map("rated_id") @db.ObjectId
    transactionRatingOptionId String? @map("transaction_rating_option_id") @db.ObjectId
    comment                   String?

    rater                   User                     @relation("rater", fields: [raterId], references: [id])
    rated                   User                     @relation("rated", fields: [ratedId], references: [id])
    transaction             Transaction              @relation(fields: [transactionId], references: [id])
    transactionRatingOption TransactionRatingOption? @relation(fields: [transactionRatingOptionId], references: [id])

    @@unique([transactionId, raterId, ratedId])
    @@map("user_transaction_ratings")
}

// 取引評価選択肢テーブル
model TransactionRatingOption {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    rating Int

    transactionRatings TransactionRating[]

    @@map("transaction_ratings")
}

// ユーザー出品閲覧履歴テーブル
model UserViewHistory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @map("user_id") @db.ObjectId
    listingId String   @map("listing_id") @db.ObjectId
    viewedAt  DateTime @default(now()) @map("viewed_at")

    user    User    @relation(fields: [userId], references: [id])
    listing Listing @relation(fields: [listingId], references: [id])

    @@unique([userId, listingId])
    @@map("user_view_history")
}

// お知らせテーブル
model Notification {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    date    DateTime @default(now())
    content String

    userNotificationRead UserNotificationRead[]

    @@map("notifications")
}

// ユーザーお知らせ既読情報テーブル
model UserNotificationRead {
    id             String  @id @default(auto()) @map("_id") @db.ObjectId
    notificationId String  @map("notification_id") @db.ObjectId
    userId         String  @map("user_id") @db.ObjectId
    isRead         Boolean @default(false) @map("is_read")

    user         User         @relation(fields: [userId], references: [id])
    notification Notification @relation(fields: [notificationId], references: [id])

    @@unique([notificationId, userId])
    @@map("user_notification_reads")
}

// 認証情報テーブル
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

// セッションテーブル
model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id") @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

// 認証トークンテーブル
model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
